generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

enum WorkspaceRole {
    ADMIN
    MEMBER
}

enum TaskStatus {
    TODO
    IN_PROGRESS
    DONE
}

enum TaskType {
    TASK
    BUG
    FEATURE
    IMPROVEMENT
    OTHER
}

enum ProjectStatus {
    ACTIVE
    PLANNING
    COMPLETED
    ON_HOLD
    CANCELLED
}

enum Priority {
    LOW
    MEDIUM
    HIGH
}

model User {
    id        String   @id
    name      String
    email     String   @unique
    image     String   @default("")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    workspaces      WorkspaceMember[]
    projects        Project[]         @relation("ProjectOwner")
    tasks           Task[]            @relation("TaskAssignee")
    comments        Comment[]
    ownedWorkspaces Workspace[]
    ProjectMember   ProjectMember[]
}

model Workspace {
    id          String   @id
    name        String
    slug        String   @unique
    description String?
    settings    Json     @default("{}")
    ownerId     String
    createdAt   DateTime @default(now())
    image_url   String   @default("")
    updatedAt   DateTime @updatedAt

    members  WorkspaceMember[]
    projects Project[]
    owner    User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model WorkspaceMember {
    id          String        @id @default(uuid())
    userId      String
    workspaceId String
    message     String        @default("")
    role        WorkspaceRole @default(MEMBER)
    user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    @@unique([userId, workspaceId]) // prevent duplicate membership
}

model Project {
    id          String          @id @default(uuid())
    name        String
    description String?
    priority    Priority        @default(MEDIUM)
    status      ProjectStatus   @default(ACTIVE)
    start_date  DateTime?
    end_date    DateTime?
    team_lead   String
    workspaceId String
    progress    Int             @default(0)
    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @updatedAt
    members     ProjectMember[]

    owner     User      @relation("ProjectOwner", fields: [team_lead], references: [id], onDelete: Cascade)
    workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    tasks     Task[]
}

model ProjectMember {
    id        String  @id @default(uuid())
    userId    String
    projectId String
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    @@unique([userId, projectId]) // prevent duplicate membership
}

model Task {
    id          String     @id @default(uuid())
    projectId   String
    title       String
    description String?
    status      TaskStatus @default(TODO)
    type        TaskType   @default(TASK)
    priority    Priority   @default(MEDIUM)
    assigneeId  String
    due_date    DateTime
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt

    project  Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
    assignee User      @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: Cascade)
    comments Comment[]
}

model Comment {
    id        String   @id @default(uuid())
    content   String
    userId    String
    taskId    String
    createdAt DateTime @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
}
